以下是针对每个数据库表的详细测试样例设计，包含功能测试、约束验证及业务逻辑覆盖：

---

### **1. 档案表测试**
**测试场景**：员工离职后重新入职  
**测试步骤**：
1. 创建员工A（身份证号：ID1），入职时间=2020-01-01，在职状态=是
2. 更新员工A为离职状态
3. 重新创建员工A（同一身份证号ID1），入职时间=2023-01-01  
**验证点**：
- ✅ 新记录生成**不同员工ID**
- ✅ 新记录的`当前入职时间`=2023-01-01
- ✅ 雇佣历史表中原记录的`离职时间`被填充
- ✅ 雇佣历史表新增记录`入职时间`=2023-01-01且`离职时间`为空

---

### **2. 雇佣历史表测试**
**测试场景**：插入在职员工记录  
**测试步骤**：  
插入一条数据：`身份证号=ID1`, `入职时间=2023-01-01`, `离职时间=NULL`  
**验证点**：  
- ✅ 允许插入且无报错
- ✅ 查询该记录时`离职时间`字段为`NULL`

---

### **3. 登录表级联删除测试**
**测试步骤**：
1. 创建员工A并添加登录账号（员工ID=1001）
2. 删除档案表中员工ID=1001的记录  
**验证点**：  
- ✅ 登录表中员工ID=1001的记录被自动删除
- ✅ 删除操作触发`ON DELETE CASCADE`

---

### **4. 账号表测试**
**测试场景1**：唯一账号冲突  
**测试步骤**：  
尝试插入两条记录：`员工ID=1001, 账号=alice` 和 `员工ID=1002, 账号=alice`  
**验证点**：  
- ✅ 第二条插入报错（违反唯一约束）

**测试场景2**：密码加密存储  
**测试步骤**：  
插入`密码=123456`  
**验证点**：  
- ✅ 数据库存储的密码为哈希值（如`a7d3f8...`）

---

### **5. 打卡记录表测试**
**测试场景1**：同一员工单日打卡  
**测试步骤**：  
插入两条记录：  
- `员工ID=1001, 日期=2023-10-01, 类型=上班, 时间=09:00`  
- `员工ID=1001, 日期=2023-10-01, 类型=下班, 时间=18:00`  
**验证点**：  
- ✅ 两条记录均插入成功

**测试场景2**：跨天打卡  
**测试步骤**：  
插入：  
- `员工ID=1001, 日期=2023-10-01, 类型=下班, 时间=00:05`（实际时间为次日凌晨）  
**验证点**：  
- ✅ 日期字段仍为`2023-10-01`（需业务逻辑处理跨天）

---

### **6. 薪酬表测试**
**测试场景**：脚本计算与手动修改冲突  
**测试步骤**：
1. 脚本自动计算员工ID=1001的薪酬为5000元
2. 手动修改该记录薪酬为5500元  
**验证点**：  
- ✅ 最终薪酬=5500元（手动修改覆盖自动计算）

---

### **7. 消息表测试**
**测试场景**：高并发消息插入  
**测试步骤**：  
使用压测工具模拟同一员工在1秒内插入1000条消息  
**验证点**：  
- ✅ 所有消息插入成功
- ✅ 自增主键连续无跳跃（检查`消息ID`递增顺序）

---

### **8. 员工-部门关联表测试**
**测试场景**：插入无效部门/职位  
**测试步骤**：  
尝试插入`部门ID=999`（不存在）  
**验证点**：  
- ✅ 插入失败（违反外键约束）

---

### **9. 审批表测试**
**测试场景**：同一员工多审批请求  
**测试步骤**：  
员工ID=1001连续提交5个审批请求  
**验证点**：  
- ✅ 所有请求成功插入，`审批ID`自增

---

### **10. 招聘表测试**
**测试场景**：同一人单日多岗位申请  
**测试步骤**：  
插入两条记录：  
- `身份证号=ID1, 日期=2023-10-01, 期望部门=1, 期望岗位=1`  
- `身份证号=ID1, 日期=2023-10-01, 期望部门=1, 期望岗位=2`  
**验证点**：  
- ✅ 根据主键规则（日期+身份证号+部门+岗位）判断是否允许（若主键包含所有字段则允许）

---

### **通用测试项**
1. **外键约束**：删除部门信息表的部门ID=1时，关联表（如招聘表、员工-部门表）应级联删除或阻止操作
2. **唯一性约束**：尝试插入重复身份证号（档案表）、重复账号（登录表）时触发错误
3. **数据一致性**：修改档案表员工姓名后，检查消息表等关联表的冗余字段是否同步更新（若无冗余字段则无需测试）

---

通过以上测试可覆盖数据库约束、业务逻辑及高风险场景，确保系统稳定性。